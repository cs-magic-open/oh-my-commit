name: Check Config Documentation

on:
  push:
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'README.md'
      - 'scripts/generate-config-docs.ts'
      - '.github/workflows/check-config-docs.yml'
      - 'docs/**'
  pull_request:
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'README.md'
      - 'scripts/generate-config-docs.ts'
      - '.github/workflows/check-config-docs.yml'
      - 'docs/**'

jobs:
  check-config-docs:
    name: Check if config docs are in sync
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "Installing dependencies with frozen lockfile..."
            pnpm install --frozen-lockfile
          else
            echo "Warning: pnpm-lock.yaml not found, installing without frozen lockfile..."
            pnpm install --no-frozen-lockfile
          fi

      - name: Generate temporary config docs
        run: |
          pnpm tsx scripts/generate-config-docs.ts -o temp-config.md --section "## 配置项"
          
      - name: Check if docs are in sync
        run: |
          # 从 README.md 提取配置部分
          awk '/^## 配置项$/,/^##[^#]/' README.md > current-config.md
          
          # 比较生成的配置和当前配置
          if ! diff -q current-config.md temp-config.md > /dev/null; then
            echo "::error::Configuration documentation is out of sync with package.json"
            echo "Please run 'pnpm gen-docs' to update the documentation"
            exit 1
          fi
          
          echo "Configuration documentation is in sync with package.json "
          
      - name: Cleanup temporary files
        if: always()
        run: |
          rm -f temp-config.md current-config.md
